<?php
/*
 * $RCSfile
 *
 * phpBaseClasses - Foundation for any application in php
 * Copyright (C) 2002-2003 Russell Chadwick
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision: 1.14 $ $Date: 2004/01/13 18:54:23 $
 * @package phpBaseClasses
 * @link http://www.toolshed51.com/
 * @copyright 2002-2003 Russell Chadwick
 * @author Russell Chadwick <toolshed@toolshed51.com>
 */

if (defined('CLASSDATAINPUT')) {
        return;
} else {
	/**
	 * Constant used to workaround buggy include_once and require_once
	 */
	define('CLASSDATAINPUT', 1);

	/**
	 * Classes to assist in inputing data. This includes everything from 
	 * routines for creating simple dropdowns to functions for collecting
	 * data based on table description.  See the auto_administration_tool.php
	 * for examples of using this library.
	 *
	 * @package phpBaseClasses
	 */
	class DataInput {
		/**
		 * Version of this class
		 *
		 * @var integer $_version
		 * @access private
		 */
		var $_version;

		/**
		 * Version of this class
		 *
		 * @var array Description from loadDescription
		 * @access private
		 */
		var $_description;

		/**
		 * The multidimensional array is formatted as:
		 * database_type=>
		 *		data_type1=>
		 *			property1=>value, 
		 *			property2=>value
		 *		data_type2=>
		 *			property1=>value, 
		 *			property2=>value
		 *
		 * @var array Properties about various data types
		 * @access private
		 */
		var $_dataTypes;

		/**
		 * Constructor which optionally takes a description.  If a description is not
		 * provided, certain functions will fail.
		 *
		 * @access public
		 * @param array Description from $db->doDescribe
		 * @return void
		 */
		function DataInput ($description='') {
			$this->_version = 0.2;

			$this->loadDescription ($description);

			$this->_dataTypes = array ('PgSQL'=>array (
							'smallint'=>array (
								'min'=>-32768, 
								'max'=>32767
							),
							'integer'=>array (
								'min'=>-2147483648, 
								'max'=>2147483647
							),
							'bigint'=>array (
								'min'=>-9223372036854775808, 
								'max'=>9223372036854775807
							),
							'real'=>array (
								'precision'=>6, 
								'min'=>-37, 
								'max'=>37
							), 
							'double precision'=>array (
								'precision'=>15, 
								'min'=>-308, 
								'max'=>308
							), 
							'date'=>array (
								'min'=>-4713, 
								'max'=>32767
							),
							'timestamp'=>array (
								'min'=>-4713, 
								'max'=>1465001
							)
						)
					);
		}

		/**
		 * Loads a description of a table.
		 *
		 * @access public
		 * @param array Description from $db->doDescribe
		 * @return void
		 */
		function loadDescription ($description) {
			global $db;

			if (!empty ($description)) {
				if (!is_array ($description)) 
					$description = $db->doDescribe ($description);

				if (is_array ($description)) 
					$this->_description = $description;
			}
		}

		/**
		 * Creates a javascript call to validate the form before
		 * it actually gets submitted, when it should be checked
		 * more thouroughly
		 *
		 * @access public
		 * @param array return value from makeEditAll
		 * @param string Either JS or PHP depending on where you are validating
		 * @return HTML for Javascript call to validate the form
		 */
		function getValidateAll ($edits, $type) {
			if ($type == 'JS') {
				$validation = "validateForm ('submit', ";
			} else if ($type == 'PHP') {
				$validation = '$validate = "";';
			}

			reset ($edits);
			foreach ($edits as $count=>$edit) {
				if (!empty ($edit['validation'])) {
					if ($type == 'JS') {
						$validation .= str_replace (')validate', ') + validate', $edit['validation']) . ' + ';
					} else if ($type == 'PHP') {
						$validation .= '$validate .= $datainput->' . str_replace (')validate', ');$validate .= $datainput->validate', $edit['validation']) . ';';
					}
				}
			}

			if ($type == 'JS') {
				return substr ($validation, 0, -3) . ')';
			} else if ($type == 'PHP') {
				return $validation;
			}
		}

		/**
		 * Returns any error message if applicable from running
		 * validation code generated by getEditByName
		 *
		 * @access public
		 * @param string Name of Column to validate
		 * @param array Options to be passed along to getEditByName
		 * @return string Error message from validating
		 */
		function validateByName ($name, $options='') {
			$edit = $this->getEditByName ($name, '', $options);

			if ($edit) {
				$validation = '$validate .= $this->' . str_replace (')validate', ');$validate .= $this->validate', $edit['validation']) . ';';
				if (strpos ($validation, 'clearError') !== false) {
					$validation = substr ($validation, strpos ($validation, ';') + 1);
				}

				eval ('$validate = "";' . $validation);

				return $validate;
			} else {
				return '';
			}
		}

		/**
		 * Goes through description and calls getEditByName on 
		 * each field.
		 *
		 * @access public
		 * @param array Key must match column_name in description, value is current value
		 * @param array Key must match column_name in description, value is array of options to apply to that field
		 * @return array An array of all edit arrays
		 */
		function makeEditAll ($current_values='', $options='') {
			$edits = array ();

			if (empty ($current_values))
				$current_values = array ();

			if (empty ($options))
				$options = array ();

			foreach ($this->_description as $count=>$item) {
				$edits[$count] = $this->getEditByName ($item['column_name'], @$current_values[$item['column_name']], @$options[$item['column_name']]);
				$edits[$count]['column_name'] = $item['column_name'];
			}

			return $edits;
		}

		/**
		 * Finds column data in the full description and passes that columns 
		 * description to makeEdit
		 *
		 * @access public
		 * @param string Name of the column to create edit for
		 * @param array Current value for this field
		 * @param array Options to apply to that field
		 * @return string HTML for inputting the data
		 */
		function getEditByName ($name, $current_value='', $options='') {
			$index = searchArrayForIndexByKeyVal ($this->_description, 'column_name', $name);
			if (empty($index)) {
				debug ('getEditByName: Specified column <b>' . $name . '</b> not found', 2);
				return false;
			} else {
				return $this->makeEdit ($this->_description[$index], $current_value, $options);
			}
		}

		/**
		 * Uses getEditByName then arrages certain fields suitable
		 * for dropping into a 5 column table
		 *
		 * @access public
		 * @param integer ID of column, used to determine whether even or odd row
		 * @param string Name of the column to create edit for
		 * @param array Current value for this field
		 * @param array Options to apply to that field
		 * @return string HTML for inputting the data
		 */
		function displayEditByName ($index, $name, $current_value='', $options='') {
			global $smarty;

			if ((isset ($_GET['action'])) && (strtoupper ($_GET['action']) == 'DELETE')) {
				$options['locked'] = true;
				$options['hidden'] = true;
			}

			$edit = $this->getEditByName ($name, $current_value, $options);

			if ($edit) {
				if (empty ($index)) {
					$class = '';
				} else if ($index % 2 == 0) {
					$class = 'table_even_row';
				} else {
					$class = 'table_odd_row';
				}

				$smarty->assign ('class', $class);
				$smarty->debugging = true;
				$smarty->assign ('edit', $edit);
				return $smarty->fetch ($edit['template']);
			} else {
				return '';
			}
		}

		/**
		 * Auto generates an input based on an slice of $db->doDescribe 
		 * and returns the html for inputting the data.
		 *
		 * @access public
		 * @param array Description of the column, one piece of table description
		 * @param array Current value for this field
		 * @param array Options to apply to that field
		 * @return string HTML for inputting the data
		 */
		function makeEdit ($description, $current_value='', $options='') {
			global $config, $db, $display;

			$defaults = array (
						'LOAD_COMMENTS'=>true, 
						'DISABLE_PASSWORD'=>false, 
						'template'=>'datainput_full.tpl'
					);
			$options = populate_defaults ($options, $defaults);


			$edit = array ();
			$edit['column_name'] = $description['column_name'];
			$edit['column_id'] = $description['column_id'];
			$edit['title'] = $display->makeReadable ($edit['column_name']);

			$edit['required'] = false;
			$edit['help'] = '';
			$edit['help_message'] = '';
			$edit['example'] = '';
			$edit['validation'] = '';
			$edit['empty'] = "''";
			$edit['save'] = '"\'" . saveData (#) . "\'"';
			$edit['na'] = '';
			$edit['error'] = '';

			$edit['table_name'] = $description['table_name'];
			$edit['sequenced'] = $description['sequenced'];
			$edit['data_length'] = $description['data_length'];
			$edit['data_type'] = $description['data_type'];
			$edit['is_nullable'] = $description['is_nullable'];
			$edit['default_value'] = $description['default_value'];

			$edit['foreign_table'] = $description['foreign_table'];
			$edit['foreign_column'] = $description['foreign_column'];

			$edit['date_input'] = $config['DEFAULT_DATE_INPUT'];

			if (substr ($edit['data_type'], 0, 7) == 'numeric') {
				$edit['data_length'] = str_replace (',0', '', substr ($edit['data_type'], 8, -1));
				$edit['data_type'] = 'numeric';
			}

			$edit['data_type'] = str_replace ('decimal', 'numeric', $edit['data_type']);

			if (isset ($this->_dataTypes[$db->_dbType][$edit['data_type']])) {
				$edit['min'] = @$this->_dataTypes[$db->_dbType][$edit['data_type']]['min'];
				$edit['max'] = @$this->_dataTypes[$db->_dbType][$edit['data_type']]['max'];
				$edit['precision'] = @$this->_dataTypes[$db->_dbType][$edit['data_type']]['precision'];
			} else {
				$edit['min'] = '';
				$edit['max'] = '';
				$edit['precision'] = '';
			}

			if (($options['LOAD_COMMENTS']) && (!empty ($description['column_comment']))) {
				$comments = unserialize ($description['column_comment']);
				if (is_array ($comments)) {
					$edit = populate_defaults ($comments, $edit);
				}
			}

			$edit = array_merge ($edit, $options);

			if (!((@$edit['locked']) || ($edit['sequenced']))) {
				if (!$edit['is_nullable']) {
					$edit['required'] = true;
					$edit['validation'] .= "validateEmpty ('" . $edit['column_name'] . "')";
				}
			}

			if ((isset ($edit['current_value'])) && (!empty ($edit['current_value']))) {
				$current_value = $edit['current_value'];
			}

			if (isset ($edit['locked']) && ($edit['locked'])) {
				if (isset ($edit['hidden']) && ($edit['hidden'])) {
					if (empty ($current_value)) {
						$edit['input'] = $edit['default_value'] . ' <input type="hidden" name="' . $edit['column_name'] . '" value="' . $edit['default_value'] . '">';
					} else {
						$edit['input'] = $current_value . ' <input type="hidden" name="' . $edit['column_name'] . '" value="' . $current_value . '">';
					}
				} else {
					if (empty ($current_value)) {
						$edit['input'] = $edit['default_value'];
					} else {
						$edit['input'] = $current_value;
					}
				}
			} else if ($edit['sequenced']) {
				if (empty ($current_value)) {
					$edit['input'] = '<i>Auto Numbered</i>';
				} else {
					$edit['input'] = $current_value . '<input type="hidden" name="' . $edit['column_name'] . '" value="' . $current_value . '">';
				}
			} else if ((!empty ($edit['foreign_table'])) && (!empty ($edit['foreign_column']))) {
				$edit['input'] = $this->selectDB ($edit['column_name'], $current_value, $edit['foreign_table'], $edit['foreign_column'], $edit['is_nullable'], $options, $edit['column_id']);
			} else if ($edit['column_name'] == 'ip') {
				$edit['input'] = ' ' . $_SERVER['REMOTE_ADDR'] . ' <input type="hidden" name="' . $edit['column_name'] . '" value="' . $_SERVER['REMOTE_ADDR'] . '"> ';
			} else if ($edit['column_name'] == 'country') {
				$edit['input'] = $this->selectCountry ($edit['column_name'], $edit['is_nullable'], $current_value, $edit['column_id']);
			} else if (($edit['column_name'] == 'password') && (!$options['DISABLE_PASSWORD'])) {
				$data_size = 16;
				$edit['input'] = '<input type="password" name="' . $edit['column_name'] . '" size="' . $data_size . '" maxlength="' . $data_size . '" tabindex=' . $edit['column_id'] . '>
						<br>Again<br>
						<input type="password" name="' . $edit['column_name'] . '_again" size="' . $data_size . '" maxlength="' . $data_size . '" tabindex=' . $edit['column_id'] . '><br>
						<a href="javascript:void(0);" onClick="populatePassword (\'' . $edit['column_name'] . '\', \'' . $edit['column_name'] . '_again\')" tabindex=' . $edit['column_id'] . '>Generate Password</a>';
				$edit['example'] = 'Click the Generate Password link to have one made for you';
				$edit['validation'] .= "validateMatching ('" . $edit['column_name'] . "', '" . $edit['column_name'] . "_again')";
				$edit['validation'] .= "validateLength ('" . $edit['column_name'] . "', 6, 16)";
				$edit['save'] = 'savePassword (' . $edit['save'] . ')';
			} else if ($edit['data_type'] == 'boolean') {
				if ($current_value == 't') 
					$current_value = 'Yes';

				if ($current_value == 'f') 
					$current_value = 'No';

				$edit['input'] = $this->select ($edit['column_name'], array ('No', 'Yes'), false, false, $current_value, $edit['column_id']);
				$edit['na'] = $this->naBox ($this->addExtension ($edit['column_name'], '_na'), $edit['is_nullable'], $current_value, $edit['column_id']);
				$edit['save'] = 'saveBoolean (#)';
			} else if (($edit['data_type'] == 'smallint') || ($edit['data_type'] == 'integer') || ($edit['data_type'] == 'bigint')) {
				$edit['input'] = '<input type="text" name="' . $edit['column_name'] . '" value="' . $current_value . '" size="' . strlen ($edit['max']) . '" maxlength="' . strlen ($edit['max']) . '" tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '12345';
				$edit['validation'] .= "validateNumber ('" . $edit['column_name'] . "', " . $edit['min'] . ", " . $edit['max'] . ")";
				$edit['empty'] = '';
				$edit['save'] = 'saveData (#)';
			} else if (($edit['data_type'] == 'numeric') && (strpos ($edit['data_length'], ',') === false)) {
				$edit['input'] = '<input type="text" name="' . $edit['column_name'] . '" value="' . $current_value . '" size="' . $edit['data_length'] . '" maxlength="' . $edit['data_length'] . '" tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '12345';
				$edit['validation'] .= "validateNumber ('" . $edit['column_name'] . "', -" . str_repeat ('9', $edit['data_length']) . ", " . str_repeat ('9', $edit['data_length']) . ")";
				$edit['empty'] = '';
				$edit['save'] = 'saveData (#)';
			} else if (($edit['data_type'] == 'numeric') && (strpos ($edit['data_length'], ',') !== false)) {
				@list ($current_value_whole, $current_value_decimal) = explode ('.', $current_value);
				@list ($full_length, $decimal_length) = explode (',', $edit['data_length']);
				$edit['input'] = '<input type="text" name="' . $this->addExtension ($edit['column_name'], '_whole') . '" value="' . $current_value_whole . '" size=' . ($full_length - $decimal_length) . ' maxlength=' . ($full_length - $decimal_length) . ' tabindex=' . $edit['column_id'] . '> . <input type="text" name="' . $this->addExtension ($edit['column_name'], '_decimal') . '" value="' . $current_value_decimal . '" size=' . $decimal_length . ' maxlength=' . $decimal_length . ' tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '123.456';
				$edit['validation'] .= "validateNumeric ('" . $edit['column_name'] . "', " . ($full_length - $decimal_length) . ", $decimal_length)";
				$edit['empty'] = '.';
				$edit['save'] = 'saveNumeric (#)';
			} else if (($edit['data_type'] == 'real') || ($edit['data_type'] == 'double precision')) {
				@list ($current_value_significant, $current_value_exponent) = explode ('E', $current_value);
				$edit['input'] = '<input type="text" name="' . $this->addExtension ($edit['column_name'], '_significant') . '" value="' . $current_value_significant . '" size=' . ($edit['precision'] + 1) . ' maxlength=' . ($edit['precision'] + 1) . ' tabindex=' . $edit['column_id'] . '> E+ <input type="text" name="' . $this->addExtension ($edit['column_name'], '_exponent') . '" value="' . $current_value_exponent . '" size=' . strlen ($edit['max']) . ' maxlength=' . strlen ($edit['max']) . ' tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '1234E+12';
				$edit['validation'] .= "validateReal ('" . $edit['column_name'] . "', " . $edit['precision'] . ", " . $edit['max'] . ")";
				$edit['empty'] = 'E+';
				$edit['save'] = 'saveReal (#)';
			} else if ($edit['data_type'] == 'percentage') {
				$edit['input'] = $this->selectPercentage ($edit['column_name'], false, $current_value, $edit['column_id']) . ' %';
				$edit['na'] = $this->naBox ($this->addExtension ($edit['column_name'], '_na'), $edit['is_nullable'], $current_value, $edit['column_id']);
				$edit['save'] = 'saveData (#)';
			} else if ($edit['data_type'] == 'date') {
				if (substr ($current_value, 0, 1) == "'") {
					$current_value = substr ($current_value, 1, -1);
				}
				@list ($current_value_year, $current_value_month, $current_value_day) = explode ('-', $current_value);
				if ($edit['date_input'] == 'Calendar Popup') {
					$edit['input'] = '<input type="text" name="' . $edit['column_name'] . '" size=8 maxlength=10 value="' . $current_value . '" onClick="' . "openNewWindow ('/includes/administration/general/date_select_popup.php?name=" . $edit['column_name'] . "&current_date=' + this.value, 'calendar', 'scrollbars=no,resizable=no,width=225,height=225')" . '" readonly>';
					$edit['validation'] .= "validateDate ('" . $edit['column_name'] . "', 1)";
					$edit['save'] = 'saveDate (#, 1)';
				} else if ($edit['date_input'] == 'Plain') {
					$edit['input'] = '<input type="text" name="' . $edit['column_name'] . '" size=8 maxlength=10 value="' . $current_value . '">';
					$edit['validation'] .= "validateDate ('" . $edit['column_name'] . "', 1)";
					$edit['save'] = 'saveDate (#, 1)';
				} else if ($edit['date_input'] == 'Select Drop Boxes') {
					$edit['input'] = $this->selectYear ($this->addExtension ($edit['column_name'], '_year'), false, $current_value_year, $edit['column_id']) . ' - ' . 
							$this->selectMonth ($this->addExtension ($edit['column_name'], '_month'), false, $current_value_month, $edit['column_id']) . ' - ' . 
							$this->selectDay ($this->addExtension ($edit['column_name'], '_day'), false, $current_value_day, $edit['column_id']);
					$edit['validation'] .= "validateDate ('" . $edit['column_name'] . "', 3)";
					$edit['save'] = 'saveDate (#, 3)';
				}
				$edit['na'] = $this->naBox ($this->addExtension ($edit['column_name'], '_na'), $edit['is_nullable'], $current_value, $edit['column_id']);
				$edit['example'] = '2000-01-01';
				$edit['empty'] = "'--'";
			} else if (($edit['data_type'] == 'timestamp with time zone') || ($edit['data_type'] == 'timestamp without time zone')) {
				if (substr ($current_value, 0, 1) == "'") {
					$current_value = substr ($current_value, 1, -1);
				}
				@list ($current_value_date, $current_value_time, $current_value_timezone) = explode (' ', $current_value);
				@list ($current_value_year, $current_value_month, $current_value_day) = explode ('-', $current_value_date);
				@list ($current_value_hour, $current_value_minute, $current_value_second) = explode (':', $current_value_time);
				$edit['input'] = $this->selectYear ($this->addExtension ($edit['column_name'], '_year'), false, $current_value_year, $edit['column_id']) . ' - ' . 
						$this->selectMonth ($this->addExtension ($edit['column_name'], '_month'), false, $current_value_month, $edit['column_id']) . ' - ' . 
						$this->selectDay ($this->addExtension ($edit['column_name'], '_day'), false, $current_value_day, $edit['column_id']) . ' &nbsp; ' . 
						$this->selectHour ($this->addExtension ($edit['column_name'], '_hour'), false, $current_value_hour, $edit['column_id']) . ' : ' . 
						$this->selectMinute ($this->addExtension ($edit['column_name'], '_minute'), false, $current_value_minute, $edit['column_id']) . ' : ' . 
						$this->selectSecond ($this->addExtension ($edit['column_name'], '_second'), false, $current_value_second, $edit['column_id']);

				if ($edit['data_type'] == 'timestamp with time zone') {
					@list ($current_value_timezone, $trash) = explode (':', $current_value_timezone);
					$edit['input'] .= ' <br> ' . 
						$this->selectTimezone ($edit['column_name'] . '_timezone', false, $current_value_timezone, $edit['column_id']);
				}

				$edit['na'] = $this->naBox ($this->addExtension ($edit['column_name'], '_na'), $edit['is_nullable'], $current_value, $edit['column_id']);
				$edit['example'] = '2000-01-01 12:00:00';
				$edit['validation'] .= "";
				$edit['empty'] = "'-- ::'";
				$edit['save'] = 'saveTimestamp (#)';
			} else if (($edit['data_type'] == 'time with time zone') || ($edit['data_type'] == 'time without time zone')) {
				if (substr ($current_value, 0, 1) == "'") {
					$current_value = substr ($current_value, 1, -1);
				}
				@list ($current_value_time, $current_value_timezone) = explode (' ', $current_value);
				@list ($current_value_hour, $current_value_minute, $current_value_second) = explode (':', $current_value_time);
				$edit['input'] = $this->selectHour ($this->addExtension ($edit['column_name'], '_hour'), false, $current_value_hour, $edit['column_id']) . ' : ' . 
						$this->selectMinute ($this->addExtension ($edit['column_name'], '_minute'), false, $current_value_minute, $edit['column_id']) . ' : ' . 
						$this->selectSecond ($this->addExtension ($edit['column_name'], '_second'), false, $current_value_second, $edit['column_id']);

				if ($edit['data_type'] == 'time with time zone') {
					@list ($current_value_timezone, $trash) = explode (':', $current_value_timezone);
					$edit['input'] .= ' <br> ' . 
						$this->selectTimezone ($edit['column_name'] . '_timezone', false, $current_value_timezone, $edit['column_id']);
				}

				$edit['na'] = $this->naBox ($this->addExtension ($edit['column_name'], '_na'), $edit['is_nullable'], $current_value, $edit['column_id']);
				$edit['example'] = '12:00:00';
				$edit['validation'] .= "";
				$edit['empty'] = "'::'";
				$edit['save'] = 'saveTime (#)';
			} else if ($edit['data_type'] == 'inet') {
				@list ($current_value_octet1, $current_value_octet2, $current_value_octet3, $current_value_octet4) = explode ('.', $current_value);
				$edit['input'] = '<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet1') . '" value="' . $current_value_octet1 . '" size="3" maxlength="3" tabindex=' . $edit['column_id'] . '> . 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet2') . '" value="' . $current_value_octet2 . '" size="3" maxlength="3" tabindex=' . $edit['column_id'] . '> . 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet3') . '" value="' . $current_value_octet3 . '" size="3" maxlength="3" tabindex=' . $edit['column_id'] . '> . 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet4') . '" value="' . $current_value_octet4 . '" size="3" maxlength="3" tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '192.168.0.1';
				$edit['validation'] .= "validateInet ('" . $edit['column_name'] . "')";
				$edit['empty'] = "'0.0.0.0'";
				$edit['save'] = 'saveInet (#)';
			} else if ($edit['data_type'] == 'macaddr') {
				@list ($current_value_octet1, $current_value_octet2, $current_value_octet3, $current_value_octet4, $current_value_octet5, $current_value_octet6) = explode (':', $current_value);
				$edit['input'] = '<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet1') . '" value="' . $current_value_octet1 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '> : 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet2') . '" value="' . $current_value_octet2 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '> : 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet3') . '" value="' . $current_value_octet3 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '> : 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet4') . '" value="' . $current_value_octet4 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '> :
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet5') . '" value="' . $current_value_octet5 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '> :
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_octet6') . '" value="' . $current_value_octet6 . '" size="2" maxlength="2" tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = '00:0B:DB:6B:10:76';
				$edit['validation'] .= "validateMacaddr ('" . $edit['column_name'] . "')";
				$edit['empty'] = "'00:00:00:00:00:00'";
				$edit['save'] = 'saveMacaddr (#)';
			} else if (((($edit['data_type'] == 'char') || ($edit['data_type'] == 'varchar')) && ($edit['data_length'] > 300)) || ($edit['data_type'] == 'text')) {
				$edit['input'] = '<textarea name="' . $edit['column_name'] . '" cols="40" rows="8" tabindex=' . $edit['column_id'] . '>' . $current_value . '</textarea>';
				$edit['example'] = 'Multiple lines <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of text';
				$edit['save'] = '"\'" . sqlEscape (saveData (#), false) . "\'"';
			} else if ((($edit['data_type'] == 'char') || ($edit['data_type'] == 'varchar')) && ($edit['data_length'] <= 300)) {
				if (!isset ($edit['data_size'])) {
					if ($edit['data_length'] > 40) {
						$edit['data_size'] = 40;
					} else {
						$edit['data_size'] = $edit['data_length'];
					}
				}
				$edit['input'] = '<input type="text" name="' . $edit['column_name'] . '" value="' . $current_value . '" size="' . $edit['data_size'] . '" maxlength="' . $edit['data_length'] . '" tabindex=' . $edit['column_id'] . '>';
				$edit['example'] = 'One line of text';
				$edit['save'] = '"\'" . sqlEscape (saveData (#), true) . "\'"';
			} else if ($edit['data_type'] == 'point') {
				@list ($current_x, $current_y) = explode (',', substr ($current_value, 1, -1));
				$edit['input'] = ' ( <input type="text" name="' . $this->addExtension ($edit['column_name'], '_x') . '" value="' . $current_x . '" size="4" maxlength="4" tabindex=' . $edit['column_id'] . '> x , 
						<input type="text" name="' . $edit['column_name'] . '_y" value="' . $current_y . '" size="4" maxlength="4" tabindex=' . $edit['column_id'] . '> y )';
				$edit['example'] = '( 5, 10 )';
				$edit['validation'] .= "validatePoint ('" . $edit['column_name'] . "')";
				$edit['empty'] = "'(,)'";
				$edit['save'] = 'savePoint (#)';
			} else if ($edit['data_type'] == 'circle') {
				@list ($current_x, $current_y, $current_radius) = explode (',', substr ($current_value, 1, -1));
				$edit['input'] = ' ( <input type="text" name="' . $this->addExtension ($edit['column_name'], '_x') . '" value="' . $current_x . '" size="4" maxlength="4" tabindex=' . $edit['column_id'] . '> x , 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_y') . '" value="' . $current_y . '" size="4" maxlength="4" tabindex=' . $edit['column_id'] . '> y ) , 
						<input type="text" name="' . $this->addExtension ($edit['column_name'], '_radius') . '" value="' . $current_radius . '" size="4" maxlength="4" tabindex=' . $edit['column_id'] . '> radius';
				$edit['example'] = '( 5, 10 ), 20';
				$edit['validation'] .= "validateCircle ('" . $edit['column_name'] . "')";
				$edit['empty'] = "((,), )";
				$edit['save'] = 'saveCircle (#)';
			} else if ($edit['data_type'] == 'bytea') {
				$edit['input'] = '<input type="hidden" name="MAX_FILE_SIZE" value="' . (substr (ini_get('post_max_size'), 0, -1) * 1048576) . '"><input type="file" name="' . $edit['column_name'] . '" tabindex=' . $edit['column_id'] . '>';
				$edit['validation'] .= "validateFile ('" . $edit['column_name'] . "')";
				$edit['save'] = '"\'" . saveFile (#) . "\'"';
			} else {
				$edit['input'] = 'Unknown type: ' . $edit['data_type'];
			}

			if ((!empty ($edit['help_message'])) || (!empty ($edit['example']))) {
				if (!empty ($edit['help_message'])) 
					$edit['help'] .= $edit['help_message'];

				if (!empty ($edit['example'])) {
					$edit['help'] .= '<br>Example: <i>' . $edit['example'] . '</i>';
				}

				$edit['help'] = $this->popupHelp ('Help', $edit['help'], 100 + $edit['column_id']);
			}

			if (!((@$edit['locked']) || ($edit['sequenced']))) {
				if (!$edit['is_nullable']) {
					$edit['save'] = 'saveEmpty (' . $edit['save'] . ')';
				}
			}

			$edit['validation'] = "clearError ('" . $edit['column_name'] . "')" . $edit['validation'];

			if (($options['LOAD_COMMENTS']) && (!empty ($description['column_comment']))) {
				if (is_array ($comments)) {
					$edit = populate_defaults ($comments, $edit);
				}
			}

			return $edit;
		}

		/**
		 * Make all the extended variable names safe with arrays
		 *
		 * @access private
		 * @param string Original Name
		 * @param string Extension to be added
		 * @return string new name
		 */
		function addExtension ($name, $extension) {
			if (substr ($name, -1) == ']') {
				return substr ($name, 0, -1) . $extension . ']';
			} else {
				return $name . $extension;
			}
		}
				

		/**
		 * Makes a N/A Box for use where some data is nullable
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function naBox ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($is_nullable) {
				if ($current_value == '') {
					return ' N/A <input type="checkbox" name="' . $name . '" checked tabindex=' . $tabindex . '>';
				} else {
					return ' N/A <input type="checkbox" name="' . $name . '" tabindex=' . $tabindex . '>';
				}
			} else {
				return '';
			}
		}

		/**
		 * Makes a drop box for selecting a month
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectPercentage ($name, $is_nullable, $current_value=0, $tabindex=0) {
			return $this->select ($name, array (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a month
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectMonth ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('m');

			return $this->select ($name, range (1, 12), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a day
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDay ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('d');

			return $this->select ($name, range (1, 31), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a year
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @param integer Minimum Value
		 * @param integer Maximum Value
		 * @return string HTML for inputting the data
		 */
		function selectYear ($name, $is_nullable, $current_value='', $tabindex=0, $min=1900, $max=2099) {
			if ($current_value == '') 
				$current_value = date ('Y');

			return $this->select ($name, range ($min, $max), $is_nullable, false, $current_value, $tabindex);
		}

		/** 
		 * Makes 3 drop boxes for selecting a date
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDate ($name, $is_nullable=false, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('Y-m-d');

			list ($current_value_year, $current_value_month, $current_value_day) = explode ('-', $current_value);

			return $this->selectYear ($this->addExtension ($name, '_year'), false, $current_value_year, $tabindex) . ' - ' . 
					$this->selectMonth ($this->addExtension ($name, '_month'), false, $current_value_month, $tabindex) . ' - ' . 
					$this->selectDay ($this->addExtension ($name, '_day'), false, $current_value_day, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a hour
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectHour ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('H');

			return $this->select ($name, range (0, 23), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a minute
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectMinute ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('i');

			return $this->select ($name, range (0, 59), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a second
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectSecond ($name, $is_nullable, $current_value='', $tabindex=0) {
			if ($current_value == '') 
				$current_value = date ('s');

			return $this->select ($name, range (0, 59), $is_nullable, false, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a day from the previous week
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDayOfLastWeek ($name, $is_nullable, $current_value='', $tabindex=0) {
			$timestamp = mktime ();
			$values = array ();

			if ($current_value == '') 
				$current_value = date ('l', $timestamp);

			for ($index = 1; $index <= 7; $index++) {
				$current_day = mktime (0, 0, 0, date ('m', $timestamp), date ('d', $timestamp) + ($index - date ('w', $timestamp) - 7), date ('Y', $timestamp));
				$values[date ('Y-m-d', $current_day)] = date ('l m/d', $current_day);
			}

			return $this->select ($name, $values, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a day from the current week
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDayOfThisWeek ($name, $is_nullable, $current_value='', $tabindex=0) {
			$timestamp = mktime ();
			$values = array ();

			if ($current_value == '') 
				$current_value = date ('l', $timestamp);

			for ($index = 1; $index <= 7; $index++) {
				$current_day = mktime (0, 0, 0, date ('m', $timestamp), date ('d', $timestamp) + ($index - date ('w', $timestamp)), date ('Y', $timestamp));
				$values[date ('Y-m-d', $current_day)] = date ('l m/d', $current_day);
			}

			return $this->select ($name, $values, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting an interval from 1 Week to 4 Weeks
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectWeeklyInterval ($name, $is_nullable, $current_value='', $tabindex=0) {
			$values = array (1=>'1 Week', 2=>'2 Weeks', 3=>'3 Weeks', 4=>'4 Weeks');
			
			return $this->select ($name, $values, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a timezone
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectTimezone ($name, $is_nullable, $current_value='', $tabindex=0) {
			$timezones = array ('+12'=>'UTC+12 hours', 
						'+11'=>'UTC+11 hours', 
						'+10'=>'EST - Australian Eastern Standard Time, UTC+10 hours', 
						'+9'=>'UTC+9 hours', 
						'+8'=>'WST - Australian Western Standard Time, UTC+8 hours', 
						'+7'=>'UTC+7 hours', 
						'+6'=>'UTC+6 hours', 
						'+5'=>'UTC+5 hours', 
						'+4'=>'UTC+4 hours', 
						'+3'=>'MSK - Moscow Time, UTC+3 hours', 
						'+2'=>'EET - Eastern Europe Time, UTC+2 hours', 
						'+1'=>'CET - Central Europe Time, UTC+1 hours', 
						'+0'=>'UTC - Coordinated Universal Time', 
						'-1'=>'UTC-1 hours', 
						'-2'=>'UTC-2 hours', 
						'-3'=>'UTC-3 hours', 
						'-4'=>'AST - Atlantic Standard Time, UTC-4 hours', 
						'-5'=>'EST - Eastern Standard Time, UTC-5 hours', 
						'-6'=>'CST - Central Standard Time, UTC-6 hours', 
						'-7'=>'MST - Mountain Standard Time, UTC-7 hours', 
						'-8'=>'PST - Pacific Standard Time, UTC-8 hours', 
						'-9'=>'AKST - Alaska Standard Time, UTC-9 hours', 
						'-10'=>'HST - Hawaiian Standard Time, UTC-10 hours', 
						'-11'=>'UTC-11 hours', );
			if (empty ($current_value)) 
				$current_value = '+0';

			return $this->select ($name, $timezones, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a country
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectCountry ($name, $is_nullable, $current_value='US', $tabindex=0) {
			$countries = array ('US'=>'United States', 'AF'=>'Afghanistan', 'AL'=>'Albania', 'DZ'=>'Algeria', 'AS'=>'American Samoa', 'AD'=>'Andorra', 'AO'=>'Angola', 'AI'=>'Anguilla', 'AQ'=>'Antarctica', 'AG'=>'Antigua and Barbuda', 'AR'=>'Argentina', 
				'AM'=>'Armenia', 'AW'=>'Aruba', 'AU'=>'Australia', 'AT'=>'Austria', 'AZ'=>'Azerbaijan', 'BS'=>'Bahamas', 'BH'=>'Bahrain', 'BD'=>'Bangladesh', 'BB'=>'Barbados', 'BY'=>'Belarus', 
				'BE'=>'Belgium', 'BZ'=>'Belize', 'BJ'=>'Benin', 'BM'=>'Bermuda', 'BT'=>'Bhutan', 'BO'=>'Bolivia', 'BA'=>'Bosnia and Herzegovina', 'BW'=>'Botswana', 'BV'=>'Bouvet Island', 'BR'=>'Brazil', 
				'IO'=>'British Indian Ocean Territory', 'BN'=>'Brunei Darussalam', 'BG'=>'Bulgaria', 'BF'=>'Burkina Faso', 'BI'=>'Burundi', 'KH'=>'Cambodia', 'CM'=>'Cameroon', 'CA'=>'Canada', 
				'CV'=>'Cape Verde', 'KY'=>'Cayman Islands', 'CF'=>'Central African Republic', 'TD'=>'Chad', 'CL'=>'Chile', 'CN'=>'China', 'CX'=>'Christmas Island', 'CC'=>'Cocos (Keeling) Islands', 
				'CO'=>'Colombia', 'KM'=>'Comoros', 'CG'=>'Congo', 'CD'=>'Congo, The Democratic Republic of the', 'CK'=>'Cook Islands', 'CR'=>'Costa Rica', 'CI'=>'Cote D\'ivoire', 'HR'=>'Croatia', 
				'CU'=>'Cuba', 'CY'=>'Cyprus', 'CZ'=>'Czech Republic', 'DK'=>'Denmark', 'DJ'=>'Djibouti', 'DM'=>'Dominica', 'DO'=>'Dominican Republic', 'TP'=>'East Timor', 'EC'=>'Ecuador', 
				'EG'=>'Egypt', 'SV'=>'El Salvador', 'GQ'=>'Equatorial Guinea', 'ER'=>'Eritrea', 'EE'=>'Estonia', 'ET'=>'Ethiopia', 'FK'=>'Falkland Islands (Malvinas)', 'FO'=>'Faroe Islands', 
				'FJ'=>'Fiji', 'FI'=>'Finland', 'FR'=>'France', 'FX'=>'France, Metropolitan', 'GF'=>'French Guiana', 'PF'=>'French Polynesia', 'TF'=>'French Southern Territories', 'GA'=>'Gabon', 
				'GM'=>'Gambia', 'GE'=>'Georgia', 'DE'=>'Germany', 'GH'=>'Ghana', 'GI'=>'Gibraltar', 'GR'=>'Greece', 'GL'=>'Greenland', 'GD'=>'Grenada', 'GP'=>'Guadeloupe', 'GU'=>'Guam', 'GT'=>'Guatemala', 
				'GN'=>'Guinea', 'GW'=>'Guinea-bissau', 'GY'=>'Guyana', 'HT'=>'Haiti', 'HM'=>'Heard and Mc Donald Islands', 'VA'=>'Holy See (Vatican City State)', 'HN'=>'Honduras', 'HK'=>'Hong Kong', 
				'HU'=>'Hungary', 'IS'=>'Iceland', 'IN'=>'India', 'ID'=>'Indonesia', 'IR'=>'Iran (Islamic Republic of)', 'IQ'=>'Iraq', 'IE'=>'Ireland', 'IL'=>'Israel', 'IT'=>'Italy', 'JM'=>'Jamaica', 
				'JP'=>'Japan', 'JO'=>'Jordan', 'KZ'=>'Kazakhstan', 'KE'=>'Kenya', 'KI'=>'Kiribati', 'KP'=>'Korea, Democratic People\'s Republic of', 'KR'=>'Korea, Republic of', 'KW'=>'Kuwait', 
				'KG'=>'Kyrgyzstan', 'LA'=>'Lao People\'s Democratic Republic', 'LV'=>'Latvia', 'LB'=>'Lebanon', 'LS'=>'Lesotho', 'LR'=>'Liberia', 'LY'=>'Libyan Arab Jamahiriya', 'LI'=>'Liechtenstein', 
				'LT'=>'Lithuania', 'LU'=>'Luxembourg', 'MO'=>'Macau', 'MK'=>'Macedonia, The Former Yugoslav Republic of', 'MG'=>'Madagascar', 'MW'=>'Malawi', 'MY'=>'Malaysia', 'MV'=>'Maldives', 
				'ML'=>'Mali', 'MT'=>'Malta', 'MH'=>'Marshall Islands', 'MQ'=>'Martinique', 'MR'=>'Mauritania', 'MU'=>'Mauritius', 'YT'=>'Mayotte', 'MX'=>'Mexico', 'FM'=>'Micronesia, Federated States of', 
				'MD'=>'Moldova, Republic of', 'MC'=>'Monaco', 'MN'=>'Mongolia', 'MS'=>'Montserrat', 'MA'=>'Morocco', 'MZ'=>'Mozambique', 'MM'=>'Myanmar', 'NA'=>'Namibia', 'NR'=>'Nauru', 'NP'=>'Nepal', 
				'NL'=>'Netherlands', 'AN'=>'Netherlands Antilles', 'NC'=>'New Caledonia', 'NZ'=>'New Zealand', 'NI'=>'Nicaragua', 'NE'=>'Niger', 'NG'=>'Nigeria', 'NU'=>'Niue', 'NF'=>'Norfolk Island', 
				'MP'=>'Northern Mariana Islands', 'NO'=>'Norway', 'OM'=>'Oman', 'PK'=>'Pakistan', 'PW'=>'Palau', 'PA'=>'Panama', 'PG'=>'Papua New Guinea', 'PY'=>'Paraguay', 'PE'=>'Peru', 
				'PH'=>'Philippines', 'PN'=>'Pitcairn', 'PL'=>'Poland', 'PT'=>'Portugal', 'PR'=>'Puerto Rico', 'QA'=>'Qatar', 'RE'=>'Reunion', 'RO'=>'Romania', 'RU'=>'Russian Federation', 
				'RW'=>'Rwanda', 'KN'=>'Saint Kitts and Nevis', 'LC'=>'Saint Lucia', 'VC'=>'Saint Vincent and the Grenadines', 'WS'=>'Samoa', 'SM'=>'San Marino', 'ST'=>'Sao Tome and Principe', 
				'SA'=>'Saudi Arabia', 'SN'=>'Senegal', 'SC'=>'Seychelles', 'SL'=>'Sierra Leone', 'SG'=>'Singapore', 'SK'=>'Slovakia (Slovak Republic)', 'SI'=>'Slovenia', 'SB'=>'Solomon Islands', 
				'SO'=>'Somalia', 'ZA'=>'South Africa', 'GS'=>'South Georgia and the South Sandwich Islands', 'ES'=>'Spain', 'LK'=>'Sri Lanka', 'SH'=>'St. Helena', 'PM'=>'St. Pierre and Miquelon', 
				'SD'=>'Sudan', 'SR'=>'Suriname', 'SJ'=>'Svalbard and Jan Mayen Islands', 'SZ'=>'Swaziland', 'SE'=>'Sweden', 'CH'=>'Switzerland', 'SY'=>'Syrian Arab Republic', 
				'TW'=>'Taiwan, Province of China', 'TJ'=>'Tajikistan', 'TZ'=>'Tanzania, United Republic of', 'TH'=>'Thailand', 'TG'=>'Togo', 'TK'=>'Tokelau', 'TO'=>'Tonga', 'TT'=>'Trinidad and Tobago', 
				'TN'=>'Tunisia', 'TR'=>'Turkey', 'TM'=>'Turkmenistan', 'TC'=>'Turks and Caicos Islands', 'TV'=>'Tuvalu', 'UG'=>'Uganda', 'UA'=>'Ukraine', 'AE'=>'United Arab Emirates', 
				'GB'=>'United Kingdom', 'US'=>'United States', 'UM'=>'United States Minor Outlying Islands', 'UY'=>'Uruguay', 'UZ'=>'Uzbekistan', 'VU'=>'Vanuatu', 'VE'=>'Venezuela', 'VN'=>'Viet Nam', 
				'VG'=>'Virgin Islands (British)', 'VI'=>'Virgin Islands (U.S.)', 'WF'=>'Wallis and Futuna Islands', 'EH'=>'Western Sahara', 'YE'=>'Yemen', 'YU'=>'Yugoslavia', 'ZM'=>'Zambia', 'ZW'=>'Zimbabwe');

			return $this->select ($name, $countries, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting a Yes or No for boolean data
		 *
		 * @access public
		 * @param string Name of field
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectYesNo ($name, $is_nullable, $current_value='', $tabindex=0) {
			switch ($current_value) {
				case 'No':
				case 'f':
					$current_value = 'N';
					break;
				case 'Yes':
				case 't':
					$current_value = 'Y';
					break;
			}

			$data = array ('N'=>'No', 'Y'=>'Yes');
			return $this->select ($name, $data, $is_nullable, true, $current_value, $tabindex);
		}

		/**
		 * Makes a drop box for selecting data pulled from data given to function
		 *
		 * @access public
		 * @param string Name of field
		 * @param array single dimensional key=>value, data to be placed in drop box
		 * @param boolean Whether field is nullable
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectKeysOnly ($name, $data, $is_nullable, $current_value='', $tabindex=0) {
			$retval = '
				<select name="' . $name . '" tabindex=' . $tabindex . '>';

			if ($is_nullable == 'true') {
				$retval .= '
					<option value="">None</option>';
			}

			foreach ($data as $key=>$value) {
				if ($key == $current_value) {
					$retval .= '
					<option value="' . $key . '" selected>' . $key . '</option>';
				} else {
					$retval .= '
					<option value="' . $key . '">' . $key . '</option>';
				}
			}

			$retval .= '
				</select>';

			return $retval;
		}

		/**
		 * Makes a drop box for selecting data pulled from data given to function
		 *
		 * @access public
		 * @param string Name of field
		 * @param array single dimensional key=>value or just key, data to be placed in drop box
		 * @param boolean Whether field is nullable
		 * @param boolean Whether to use value for displayed data or just display the key
		 * @param string Current value of field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function select ($name, $data, $is_nullable, $keyval=true, $current_value='', $tabindex=0) {
			$retval = '
				<select name="' . $name . '" tabindex=' . $tabindex . '>';

			if ($is_nullable == 'true') {
				$retval .= '
					<option value="">None</option>';
			}

			if ($keyval) {
				foreach ($data as $key=>$value) {
					if ($key == $current_value) {
						$retval .= '
					<option value="' . $key . '" selected>' . $value . '</option>';
					} else {
						$retval .= '
					<option value="' . $key . '">' . $value . '</option>';
					}
				}
			} else {
				foreach ($data as $key) {
					if ($key == $current_value) {
						$retval .= '
					<option value="' . $key . '" selected>' . $key . '</option>';
					} else {
						$retval .= '
					<option value="' . $key . '">' . $key . '</option>';
					}
				}
			}

			$retval .= '
				</select>';

			return $retval;
		}

		/**
		 * Makes a drop box for selecting data pulled from database information
		 *
		 * @access public
		 * @param string Name of field
		 * @param string Current value of field
		 * @param string Table name to pull from
		 * @param string Column name to pull from 
		 * @param boolean Whether field is nullable
		 * @param array Options to apply to that field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDB ($name, $current_value, $table, $column, $is_nullable=false, $options='', $tabindex=0) {
			global $db;

			$find_name_column = 'false';
			$table_description = $db->doDescribe ($table);
			while (list ($key, $description) = each ($table_description)) {
				if (($find_name_column == 'true') && (strpos (' ' . $description['data_type'], 'char') > 0)) {
					$name_column = $description['column_name'];
					$find_name_column = 'false';
				}
				if ($description['column_name'] == $column) {
					$id_column = $column;
					$find_name_column = 'true';
				}
			}

			if (isset($id_column) && isset($name_column)) {
				$query = "SELECT $id_column, ";

				if ((isset ($options['foreign_key_name_column'])) && (!empty ($options['foreign_key_name_column']))) {
					$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, $options['foreign_key_name_column']));
				} else {
					$query .= "$name_column";
				}

				$query .= " AS name FROM $table ";

				if ((isset ($options['foreign_key_where_clause'])) && (!empty ($options['foreign_key_where_clause']))) {
					$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, "WHERE " . $options['foreign_key_where_clause']));
				}

				if ((isset ($options['where_clause'])) && (!empty ($options['where_clause']))) {
					$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, "WHERE " . $options['where_clause']));
				}

				$query .= " ORDER BY ";

				if ((isset ($options['foreign_key_name_column'])) && (!empty ($options['foreign_key_name_column']))) {
					$query .= 'upper (' . str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, $options['foreign_key_name_column'])) . ')';
				} else {
					$query .= "upper ($name_column)";
				}

				$data = $db->doQuery2Columns ($query);

				$retval = $this->select ($name, $data, $is_nullable, true, $current_value, $tabindex);

				return $retval;
			} else {
				debug ('selectDB: ID/Name Columns could not be found', 2);

				return '';
			}

		}

		/**
		 * Makes a drop box for selecting data pulled from a simple database query
		 *
		 * @access public
		 * @param string Name of field
		 * @param string Table name to pull from
		 * @param string ID Column name to pull from 
		 * @param string Name Column name to pull from 
		 * @param string Current value of field
		 * @param boolean Whether field is nullable
		 * @param array Options to apply to that field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectDBSimple ($name, $table, $id_column, $name_column, $current_value, $is_nullable=false, $options='', $tabindex=0) {
			global $db;

			if (empty ($id_column)) {
				$id_column = $name_column;
			}

			$query = "SELECT $id_column, ";

			if ((isset ($options['foreign_key_name_column'])) && (!empty ($options['foreign_key_name_column']))) {
				$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, $options['foreign_key_name_column']));
			} else {
				$query .= "$name_column";
			}

			$query .= " AS name FROM $table ";

			if ((isset ($options['foreign_key_where_clause'])) && (!empty ($options['foreign_key_where_clause']))) {
				$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, "WHERE " . $options['foreign_key_where_clause']));
			}

			if ((isset ($options['where_clause'])) && (!empty ($options['where_clause']))) {
				$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, "WHERE " . $options['where_clause']));
			}

			$query .= " ORDER BY ";

			if ((isset ($options['foreign_key_name_column'])) && (!empty ($options['foreign_key_name_column']))) {
				$query .= str_replace ('#id#', $id_column, str_replace ('#name#', $name_column, $options['foreign_key_name_column']));
			} else {
				$query .= "$name_column";
			}

			$data = $db->doQuery2Columns ($query);

			$retval = $this->select ($name, $data, $is_nullable, true, $current_value, $tabindex);

			return $retval;
		}

		/**
		 * Makes a drop box for selecting data pulled from a simple database query
		 *
		 * @access public
		 * @param string Name of field
		 * @param string Table name to pull from
		 * @param string ID Column name to pull from 
		 * @param string Name Column name to pull from 
		 * @param string Current value of field
		 * @param boolean Whether field is nullable
		 * @param array Options to apply to that field
		 * @param integer Tabindex for input
		 * @return string HTML for inputting the data
		 */
		function selectQuery ($name, $query, $current_value, $is_nullable=false, $options='', $tabindex=0) {
			global $db;

			$data = $db->doQuery2Columns ($query);

			$retval = $this->select ($name, $data, $is_nullable, true, $current_value, $tabindex);

			return $retval;
		}

		/**
		 * Makes some HTML to display some help using the overlib library
		 *
		 * @access public
		 * @param string Title of help box
		 * @param string Contents of help box
		 * @return string HTML for help box
		 */
		function popupHelp ($title, $text, $tabindex=999) {
			global $ol, $config;

			if ($config['OVERLIB_ENABLED']) {
				return '<small><a href="#" ' . $ol->over ($text, $title) . ' tabindex=' . $tabindex . '>[ ? ]</a></small>';
			} else {
				debug ('popupHelp: Overlib must be enabled to use classDataInput->popupHelp', 2);
			}
		}

		/**
		 * Validate input for all numeric data
		 *
		 * @access public
		 * @param string Value to test
		 * @return boolean True if valid
		 */
		function validateDigits ($value) {
			return $this->validateCharacterSet ($value, '-0123456789');
		}

		/**
		 * Validate input against a set of valid characters
		 *
		 * @access public
		 * @param string Value to test
		 * @param string Set of valid characters
		 * @return boolean True if valid
		 */
		function validateCharacterSet ($value, $character_set) {
			for ($index = 0; $index < strlen ($value); $index++) {
				if (strpos ($character_set, substr ($value, $index, 1)) === false) {
					return false;
				}
			}

			return true;
		}

		/**
		 * Validate input for number being in acceptable range
		 *
		 * @access public
		 * @param integer Value to test
		 * @param integer Minimum acceptable value
		 * @param integer Maximum acceptable value
		 * @return boolean True if valid
		 */
		function validateRange ($value, $min, $max) {
			if ($value < $min || $value > $max) {
				return false;
			} else {
				return true;
			}
		}

		/**
		 * Validate input for minimum acceptable length
		 *
		 * @access public
		 * @param string Value to test
		 * @param integer Minimum length for value
		 * @return boolean True if valid
		 */
		function validateMinimumLength ($value, $min) {
			if (substr ($value, 0, 1) == '-')
				$value = substr ($value, 1);

			if ($min != 0) {
				if (strlen ($value) < $min) {
					return false;
				}
			}

			return true;
		}

		/**
		 * Validate input for maximum acceptable length
		 *
		 * @access public
		 * @param string Value to test
		 * @param integer Maximum length for value
		 * @return boolean True if valid
		 */
		function validateMaximumLength ($value, $max) {
			if (substr ($value, 0, 1) == '-')
				$value = substr ($value, 1);

			if ($max != 0) {
				if (strlen ($value) > $max) {
					return false;
				}
			}

			return true;
		}

		/**
		 * Validate input for being a valid hex number
		 *
		 * @access public
		 * @param string Value to test
		 * @return boolean True if valid
		 */
		function validateHex ($value) {
			return $this->validateCharacterSet ($value, '0123456789abcdefABCDEF');
		}

		/**
		 * Validate input for matching data
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param string Field of $_POST to compare to
		 * @return string Error message
		 */
		function validateMatching ($name1, $name2) {
			if ($_POST[$name1] != $_POST[$name2]) {
				return '<br>' . $name1 . ' Must Match';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for corrent length
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param integer Minimum length for value
		 * @param integer Maximum length for value
		 * @return string Error message
		 */
		function validateLength ($name, $min, $max) {
			if (!$this->validateMinimumLength ($_POST[$name], $min)) {
				return '<br>' . $name . ' is Too Short';
			} else if (!$this->validateMaximumLength ($_POST[$name], $max)) {
				return '<br>' . $name . ' is Too Long';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for not being empty
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validateEmpty ($name) {
			if ((!isset ($_POST[$name])) || (strlen ($_POST[$name]) < 1)) {
				return '<br>' . $name . ' is Required';
			}

			return '';
		}

		/**
		 * Validate input for being a valid email address by both pattern 
		 * matching and validating the dns of the server
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validateEmail ($name) {
			if (eregi("^[0-9a-z_]([-_.]?[0-9a-z])*@[0-9a-z][-.0-9a-z]*\\.[a-z]{2,3}[.]?$", $_POST[$name], $check)) { 
				$host = substr (strstr($_POST[$name], '@'), 1) . '.'; 
				if (getmxrr ($host, $mxhosts)) {
					return true; 
				} else {
					debug ('validateEmail: No Mx records for ' . $host, 3);
				}
				// THIS WILL CATCH DNSs THAT ARE NOT MX. 
				if (checkdnsrr ($host, 'ANY')) {
					return true; 
				} else {
					debug ('validateEmail: No DNS records for ' . $host, 3);
				}
			} else {
				debug ('validateEmail: Address Failed Regex', 3);
			}

			return '<br>' . $name . ' Must Contain an Email Address';
		}

		/**
		 * Validate input for being a valid number and within given range
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param integer Minimal acceptable value
		 * @param integer Maximum acceptable value
		 * @return string Error message
		 */
		function validateNumber ($name, $min, $max) {
			if (!$this->validateDigits ($_POST[$name])) {
				return $name . ' Must be a number';
			} else if (!$this->validateRange ($_POST[$name], $min, $max)) {
				return '<br>' . $name . ' Must be between ' . $min . ' and ' . $max;
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid numeric data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param integer Maximum acceptable length for whole part
		 * @param integer Maximum acceptable length for decimal part
		 * @return string Error message
		 */
		function validateNumeric ($name, $whole_max, $decimal_max) {
			if (substr ($_POST[$this->addExtension ($name, '_whole')], 0, 1) == '$') {
				$_POST[$this->addExtension ($name, '_whole')] = substr ($_POST[$this->addExtension ($name, '_whole')], 1);
			}

			if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_whole')])) {
				return '<br>' . $this->addExtension ($name, '_whole') . ' Whole portion must be a number';
			} else if (!$this->validateMaximumLength ($_POST[$this->addExtension ($name, '_whole')], $whole_max)) {
				return '<br>' . $this->addExtension ($name, '_whole') . ' Whole portion must be between 0 and ' . $whole_max . ' digits';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_decimal')])) {
				return '<br>' . $this->addExtension ($name, '_decimal') . ' Decimal portion must be a number';
			} else if (!$this->validateMaximumLength ($_POST[$this->addExtension ($name, '_decimal')], $decimal_max)) {
				return '<br>' . $this->addExtension ($name, '_decimal') . ' Decimal portion must be between 0 and ' . $decimal_max . ' digits';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid real data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param integer Number of digits valid for the significant part
		 * @param integer Maximum allowable exponent value
		 */
		function validateReal ($name, $precision, $max) {
			if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_significant')])) {
				return '<br>' . $this->addExtension ($name, '_significant') . ' Significant portion must be a number';
			} else if (!$this->validateMaximumLength ($_POST[$this->addExtension ($name, '_significant')], $precision)) {
				return '<br>' . $this->addExtension ($name, '_significant') . ' Significant portion must be between 0 and ' . $precision . ' digits';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_exponent')])) {
				return '<br>' . $this->addExtension ($name, '_exponent') . ' Exponent portion must be a number';
			} else if (!$this->validateRange ($_POST[$this->addExtension ($name, '_exponent')], 0, $max)) {
				return '<br>' . $this->addExtension ($name, '_exponent') . ' Exponent portion must be between 0 and ' . $max;
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid point data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validatePoint ($name) {
			if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_x')])) {
				return '<br>' . $this->addExtension ($name, '_x') . ' X-Coordinate must be a number';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_y')])) {
				return '<br>' . $this->addExtension ($name, '_y') . ' Y-Coordinate must be a number';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid circle data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validateCircle ($name) {
			if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_x')])) {
				return '<br>' . $this->addExtension ($name, '_x') . ' X-Coordinate must be a number';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_y')])) {
				return '<br>' . $this->addExtension ($name, '_y') . ' Y-Coordinate must be a number';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_radius')])) {
				return '<br>' . $this->addExtension ($name, '_radius') . ' Radius must be a number';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid circle data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @param integer How many boxes the date is spread across
		 * @return string Error message
		 */
		function validateDate ($name, $count) {
			global $datetime;

			if ($count == 1) {
				$date = $datetime->convertDateFormat ($_POST['name'], 'ISO8601');

				if (!$this->validateDigits (substr ($date, 0, 4))) {
					return '<br>' . $this->addExtension ($name, '_year') . ' Year must be a number';
				} else if (!$this->validateDigits (substr ($date, 5, 2))) {
					return '<br>' . $this->addExtension ($name, '_month') . ' Month must be a number';
				} else if (!$this->validateDigits (substr ($date, 8, 2))) {
					return '<br>' . $this->addExtension ($name, '_day') . ' Day must be a number';
				} else {
					return '';
				}
			} else if ($count == 3) {
				if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_year')])) {
					return '<br>' . $this->addExtension ($name, '_year') . ' Year must be a number';
				} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_month')])) {
					return '<br>' . $this->addExtension ($name, '_month') . ' Month must be a number';
				} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_day')])) {
					return '<br>' . $this->addExtension ($name, '_day') . ' Day must be a number';
				} else {
					return '';
				}
			}
		}

		/**
		 * Validate input for being a valid inet data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validateInet ($name) {
			if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_octet1')])) {
				return '<br>' . $this->addExtension ($name, '_octet1') . ' First octet must be a number';
			} else if (!$this->validateRange ($_POST[$this->addExtension ($name, '_octet1')], 0, 255)) {
				return '<br>' . $this->addExtension ($name, '_octet1') . ' First octet must be between 0 and 255';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_octet2')])) {
				return '<br>' . $this->addExtension ($name, '_octet2') . ' Second octet must be a number';
			} else if (!$this->validateRange ($_POST[$this->addExtension ($name, '_octet2')], 0, 255)) {
				return '<br>' . $this->addExtension ($name, '_octet2') . ' Second octet must be between 0 and 255';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_octet3')])) {
				return '<br>' . $this->addExtension ($name, '_octet3') . ' Third octet must be a number';
			} else if (!$this->validateRange ($_POST[$this->addExtension ($name, '_octet3')], 0, 255)) {
				return '<br>' . $this->addExtension ($name, '_octet3') . ' Third octet must be between 0 and 255';
			} else if (!$this->validateDigits ($_POST[$this->addExtension ($name, '_octet4')])) {
				return '<br>' . $this->addExtension ($name, '_octet4') . ' Fourth octet must be a number';
			} else if (!$this->validateRange ($_POST[$this->addExtension ($name, '_octet4')], 0, 255)) {
				return '<br>' . $this->addExtension ($name, '_octet4') . ' Fourth octet must be between 0 and 255';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a valid macaddr data type
		 *
		 * @access public
		 * @param string Field of $_POST to test
		 * @return string Error message
		 */
		function validateMacaddr ($name) {
			if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet1')])) {
				return '<br>' . $this->addExtension ($name, '_octet1') . ' First octet must be hex';
			} else if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet2')])) {
				return '<br>' . $this->addExtension ($name, '_octet2') . ' Second octet must be hex';
			} else if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet3')])) {
				return '<br>' . $this->addExtension ($name, '_octet3') . ' Third octet must be hex';
			} else if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet4')])) {
				return '<br>' . $this->addExtension ($name, '_octet4') . ' Fourth octet must be hex';
			} else if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet5')])) {
				return '<br>' . $this->addExtension ($name, '_octet5') . ' Fifth octet must be hex';
			} else if (!$this->validateHex ($_POST[$this->addExtension ($name, '_octet6')])) {
				return '<br>' . $this->addExtension ($name, '_octet6') . ' Sixth octet must be hex';
			} else {
				return '';
			}
		}

		/**
		 * Validate input for being a file upload
		 *
		 * @access public
		 * @param string Field of $_FILES to test
		 * @return string Error message
		 */
		function validateFile ($name) {
			if ($_FILES[$name]['error'] == UPLOAD_ERR_INI_SIZE) {
				return '<br>' . $name . ' The uploaded file exceeds the upload_max_filesize directive in php.ini';
			} else if ($_FILES[$name]['error'] == UPLOAD_ERR_FORM_SIZE) {
				return '<br>' . $name . ' The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.';
			} else if ($_FILES[$name]['error'] == UPLOAD_ERR_PARTIAL) {
				return '<br>' . $name . ' The uploaded file was only partially uploaded';
			} else if ($_FILES[$name]['error'] == UPLOAD_ERR_NO_FILE) {
				return '<br>' . $name . ' No file was uploaded';
			} else {
				return '';
			}
		}

		/**
		 * Gets a column name from an data input which was posted
		 * with more than one variable
		 *
		 * @access private
		 * @param string Name of post variable found
		 * @return string Name of column it is for
		 */
		function getRealName ($name) {
			if (
				(substr ($name, -5) == '_year') ||
				(substr ($name, -6) == '_month') ||
				(substr ($name, -4) == '_day') ||
				(substr ($name, -5) == '_hour') ||
				(substr ($name, -7) == '_minute') ||
				(substr ($name, -7) == '_second') ||
				(substr ($name, -3) == '_na') ||
				(substr ($name, -6) == '_whole') ||
				(substr ($name, -7) == '_decimal') ||
				(substr ($name, -12) == '_significant') ||
				(substr ($name, -9) == '_exponent') ||
				(substr ($name, -2) == '_x') ||
				(substr ($name, -2) == '_y') ||
				(substr ($name, -7) == '_radius') ||
				(substr ($name, -7) == '_octet1') ||
				(substr ($name, -7) == '_octet2') ||
				(substr ($name, -7) == '_octet3') ||
				(substr ($name, -7) == '_octet4') ||
				(substr ($name, -7) == '_octet5') ||
				(substr ($name, -7) == '_octet6')) {

				return substr ($name, 0, strrpos ($name, '_'));
			} else {
				return $name;
			}
		}

		/**
		 * Write post variables made up of combined variables from
		 * an data input which was posted with more than one variable
		 *
		 * @access private
		 * @return void
		 */
		function setRealNames () {
			foreach ($_POST as $key => $value) {
				$realkey = $this->getRealName ($key);
				if ($realkey != $key) {
					$edit = $this->getEditByName ($realkey);
					if ($edit) {
						eval ('$_POST["$realkey"] = ' . str_replace ('#', "'$realkey'", str_replace ('save', '$this->save', $edit['save'])) . ';');
					}
				}
			}
		}

		function saveData ($name) {
			return @$_POST[$name];
		}

		function saveEmpty ($data) {
			return orNull ($data);
		}

		/**
		 * Tests if an NA box was checked for given column
		 *
		 * @access public
		 * @param string Field of description to test
		 * @return boolean Whether an NA box was checked for given column
		 */
		function saveNA ($name) {
			if ((isset ($_POST[$this->addExtension ($name, '_na')])) && ($_POST[$this->addExtension ($name, '_na')] == 'on')) {
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Data to save for being a valid boolean data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveBoolean ($name) {
			if (($_POST[$name] == 'Yes') || ($_POST[$name] == 't')) {
				return "'t'";
			} else {
				return "'f'";
			}
		}

		/**
		 * Data to save for being a valid numeric data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveNumeric ($name) {
			return $_POST[$this->addExtension ($name, '_whole')] . '.' . $_POST[$this->addExtension ($name, '_decimal')];
		}

		/**
		 * Data to save for being a valid real data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveReal ($name) {
			return $_POST[$this->addExtension ($name, '_significant')] . 'E+' . $_POST[$name . '_exponent'];
		}

		/**
		 * Data to save for being a valid point data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function savePoint ($name) {
			return "'(" . $_POST[$this->addExtension ($name, '_x')] . ',' . $_POST[$this->addExtension ($name, '_y')] . ")'";
		}

		/**
		 * Data to save for being a valid circle data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveCircle ($name) {
			return "'((" . $_POST[$this->addExtension ($name, '_x')] . ',' . $_POST[$this->addExtension ($name, '_y')] . '), ' . $_POST[$this->addExtension ($name, '_radius')] . ")'";
		}

		/**
		 * Data to save for being a valid date data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @param integer How many boxes the date is spread across
		 * @return string Data to save
		 */
		function saveDate ($name, $count) {
			global $datetime;

			if ($count == 1) {
				return "'" . $datetime->convertDateFormat ($_POST[$name], 'ISO8601') . "'";
			} else if ($count == 3) {
				return "'" . $_POST[$this->addExtension ($name, '_year')] . '-' . $_POST[$this->addExtension ($name, '_month')] . '-' . $_POST[$this->addExtension ($name, '_day')] . "'";
			}
		}

		/**
		 * Data to save for being a valid timestamp data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveTimestamp ($name) {
			return "'" . $_POST[$this->addExtension ($name, '_year')] . '-' . $_POST[$this->addExtension ($name, '_month')] . '-' . $_POST[$this->addExtension ($name, '_day')] . ' ' . $_POST[$this->addExtension ($name, '_hour')] . ':' . $_POST[$this->addExtension ($name, '_minute')] . ':' . $_POST[$this->addExtension ($name, '_second')] . "'";
		}

		/**
		 * Data to save for being a valid time data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveTime ($name) {
			return "'" . $_POST[$this->addExtension ($name, '_hour')] . ':' . $_POST[$this->addExtension ($name, '_minute')] . ':' . $_POST[$this->addExtension ($name, '_second')] . "'";
		}

		/**
		 * Data to save for being a valid inet data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveInet ($name) {
			return "'" . or0 ($_POST[$this->addExtension ($name, '_octet1')]) . '.' . or0 ($_POST[$this->addExtension ($name, '_octet2')]) . '.' . or0 ($_POST[$this->addExtension ($name, '_octet3')]) . '.' . or0 ($_POST[$this->addExtension ($name, '_octet4')]) . "'";
		}

		/**
		 * Data to save for being a valid macaddr data type
		 *
		 * @access public
		 * @param string Field of description to save
		 * @return string Data to save
		 */
		function saveMacaddr ($name) {
			return "'" . orX ($_POST[$this->addExtension ($name, '_octet1')], '00') . ':' . orX ($_POST[$this->addExtension ($name, '_octet2')], '00') . ':' . orX ($_POST[$this->addExtension ($name, '_octet3')], '00') . ':' . orX ($_POST[$this->addExtension ($name, '_octet5')], '00') . ':' . orX ($_POST[$this->addExtension ($name, '_octet5')], '00') . ':' . orX ($_POST[$this->addExtension ($name, '_octet6')], '00') . "'";
		}

		function saveFile ($name) {
			$_POST['filename'] = $_FILES[$name]['name'];
			return pg_escape_bytea (file_get_contents ($_FILES[$name]['tmp_name']));
		}

		function savePassword ($data, $type='md5') {
			if (!empty ($data)) {
				if ($type == 'md5') {
					return "'" . md5 ($data) . "'";
				} else if ($type == 'sha1')  {
					return "'" . sha1 ($data) . "'";
				} else if ($type == 'plain')  {
					return $data;
				}
			} else {
				return $data;
			}
		}

		function saveNullable (&$data, &$edit) {
			if ($edit['is_nullable']) {
				if ($data == $edit['empty']) {
					$data = 'NULL';
				}
			} else if (!empty ($edit['default_value'])) {
				if ($data == $edit['empty']) {
					$data = $edit['default_value'];
				}
			}
		}

		function getSaveValue (&$edit) {
			global $db;

			$code = str_replace ('sqlEscape', '$db->sqlEscape', 
				str_replace ('save', '$this->save', 
				str_replace ('#', '$edit[\'column_name\']', $edit['save'])));

			$code = '$data = ' . $code . ';';

		 	eval ($code);
		 	if ((!empty ($edit['na'])) && ($this->saveNA ($edit['column_name']))) {
				$data = 'NULL';
			} else {
				$this->saveNullable ($data, $edit);
	 		}

			return $data;
		}

		function makeSQL (&$edits, $type='INSERT') {
			if ($type == 'INSERT') {
				$query = 'INSERT INTO ' . $edits[1]['table_name'] . ' (';
			} else if ($type == 'UPDATE') {
				$query = 'UPDATE ' . $edits[1]['table_name'] . ' SET ';
			} else if ($type == 'DELETE') {
				$query = 'DELETE FROM ' . $edits[1]['table_name'] . ' WHERE';
			}

			$query_end = '';

			reset ($edits);
			foreach ($edits as $count=>$edit) {
				if ($type == 'INSERT') {
					if (!$edit['sequenced']) {
						$query .= '"' . $edit['column_name'] . '", ';
						$query_end .= $this->getSaveValue ($edit) . ', ';
					}
				} else if ($type == 'UPDATE') {
					if (!$edit['sequenced']) {
						$query .= '"' . $edit['column_name'] . '" = ' . $this->getSaveValue ($edit) . ', ';
					} else {
						if ($this->getSaveValue ($edit) == 'NULL') {
							$query_end .= ' "' . $edit['column_name'] . '" IS NULL AND ';
						} else {
							$query_end .= ' "' . $edit['column_name'] . '" = ' . $this->getSaveValue ($edit) . ' AND ';
						}
					}
				} else if ($type == 'DELETE') {
					if ($edit['data_type'] != 'bytea') {
						if ($this->getSaveValue ($edit) == 'NULL') {
							$query .= ' "' . $edit['column_name'] . '" IS NULL AND ';
						} else {
							$query .= ' "' . $edit['column_name'] . '" = ' . $this->getSaveValue ($edit) . ' AND ';
						}
					}
				}
			}

			if ($type == 'INSERT') {
				return substr ($query, 0, -2) . ') VALUES (' . substr ($query_end, 0, -2) . ')';
			} else if ($type == 'UPDATE') {
				return substr ($query, 0, -2) . substr (' WHERE' . $query_end, 0, -5);
			} else if ($type == 'DELETE') {
				return substr ($query, 0, -5);
			}
		}

		function saveMessage ($update_status) {
			global $db;

			if ($update_status == 0) {
				$db->commit ();
				return '<center>Data successfully saved.</center><br>';
			} else {
				$db->rollback ();
				return '<span class="error"><center>Error saving data.  Administrator has been notified.</center></span><br>';
			}
		}

		/** 
		 * Returns array of all sequences in the current description
		 *
		 * access public
		 * return array All sequences in the current description
		 */
		function getSequenceData () {
			$sequences = array ();

			foreach ($this->_description as $key => $description) {
				if ($description['sequenced']) {
					$sequences[$description['column_name']] = substr ($description['default_value'], 9, -8);
				}
			}

			return $sequences;
		}

		function getCurrentValues (&$edits) {
			$current_values = array ();

			reset ($edits);
			foreach ($edits as $count=>$edit) {
				$current_values[$edit['column_name']] = $this->getSaveValue ($edit);
			}

			return $current_values;
		}

		function addErrorMessages (&$edits, $validate) {
			foreach (explode ('<br>', $validate) as $count=>$validate_piece) {
				reset ($edits);
				foreach ($edits as $count=>$edit) {
					if ($edit['column_name'] == substr ($validate_piece, 0, strpos ($validate_piece, ' '))) {
						$edits[$count]['error'] = '<br>' . substr ($validate_piece, strpos ($validate_piece, ' ') + 1);
					}
				}
			}
		}

		function getOrCreate ($name, $table='', $id_column='', $other_columns='', $name_column='name') {
			global $db;

			if (empty ($other_columns)) {
				$other_columns = array ();
			}

			if (empty ($table) || empty ($id_column)) {
				debug ('getOrCreate: Name, Table and ID Column are required', 1);
			} else {
				$id = $db->doQuery1Row1Column ("SELECT $id_column FROM $table WHERE $name_column = '$name'");

				if (empty ($id)) {
					$query = "INSERT INTO $table 
								($name_column, ";

					$query2 = "
							) VALUES 
								('$name', ";

					foreach ($other_columns as $column => $value) {
						$query .= "$column, ";
						if (is_numeric ($value)) {
							$query2 .= "$value, ";
						} else {
							$query2 .= $db->orNull ($value) . ', ';
						}
					}

					$query = substr ($query, 0, -2) . substr ($query2, 0, -2) . ')';

					if ($db->doUpdate ($query) == 0) {
						$db->commit ();
					} else {
						$db->rollback ();
					}

					$id = $db->doQuery1Row1Column ("SELECT $id_column FROM $table WHERE $name_column = '$name'");
				}

				return $id;
			}

			return false;
		}
	}
}
?>